#!/usr/bin/env php
<?php

require __DIR__.'/../vendor/autoload.php';

use Doctrine\Common\Cache\FilesystemCache;
use Github\Client as GithubClient;
use Lyrixx\GithubGraph\Console\Command\GraphCommand;
use Lyrixx\GithubGraph\Github\Github;
use Lyrixx\GithubGraph\Graphite\Client as GraphiteClient;
use Lyrixx\GithubGraph\Util\IssueUtility;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\Yaml\Yaml;

if (!file_exists(getcwd().'/config.yml')) {
    throw new RuntimeException('The configuration file config.yml does not exist. Please, read the README.');
}

$config = Yaml::parse(file_get_contents(getcwd().'/config.yml'));
if (!isset($config['parameters'])) {
    throw new RuntimeException('The configuration file config.yml does not contains a parameters key. Please, read the README.');
}
$config = $config['parameters'];

$cacheDir = sys_get_temp_dir().'/github-graph/object';

$fs = new Filesystem();
$fs->mkdir($cacheDir);

$fsCache = new FilesystemCache($cacheDir);

$githubClient = new GithubClient();
$githubClient->authenticate($config['github_api_token'], null, GithubClient::AUTH_HTTP_TOKEN);

$github = new Github($githubClient, $fsCache);

$graphitClient = new GraphiteClient($config['graphite']['prefix'], $config['graphite']['host'], $config['graphite']['port'], $config['graphite']['protocol']);

$issueUtility = new IssueUtility($graphitClient);

$application = new Lyrixx\GithubGraph\Console\Application('GithubGraph', 0.2);
$application->add(new GraphCommand($github, $issueUtility));
$application->run();
